// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  nickname      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]

  servers Server[]
  members Member[]

  channels Channel[]
}

model Account {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String    @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.String
  access_token      String?   @db.String
  expires_at        DateTime? @db.Date
  token_type        String?   @db.String
  scope             String?   @db.String
  id_token          String?   @db.String
  session_state     String?   @db.String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  lastMessageAt DateTime? @default(now())
  name          String?
  isGroup       Boolean   @default(false)

  messageIds String[]  @db.ObjectId
  messages   Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seenBy  User[]   @relation("Seen", fields: [seenIds], references: [id])

  seenAt DateTime? @db.Date

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  senderId  String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id])
  Channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?  @db.ObjectId
}

model Role {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}

model Permission {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
}

model Server {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String  
  imageUrl   String? @default("http://picsum.photos/200")
  inviteCode String? @unique

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  channels Channel[]
  members  Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  OWNER
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  serverId String @db.ObjectId
  server   Server @relation(fields: [serverId], references: [id])

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime @db.Date
  sessionToken String   @unique
  accessToken  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
